<html lang="en">
<head>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <title>URL - TinyApp Example</title>
</head>

<body border=3>
  <%- include('partials/_header') %>
  
  <h1>TinyApp</h1>
  
  <p>A full stack web app built with Node and Express that allows users to shorten long URLs (Ã  la bit.ly). 
    Takes up the rest of week three. </p>
  
  <h2>Project Description</h2>
  <h3>Goal</h3>
    
  <p>This four-day project will have you building a web app using Node. The app will allow users to shorten long URLs much like 
    <a href="tinyurl.com" target="_blank">TinyURL.com</a> and <a href="" target="_blank">bit.ly</a> do.</p>
  
  <p>You will build an HTTP Server that handles requests from the browser (client). Along the way you'll get introduced to some 
    more advanced JavaScript and Node concepts, and you'll also learn more about Express, a web framework which is very popular in 
    the Node community.</p>

    <h2>Functional Requirements</h2>
    <h3>User Stories</h3>
    
    <p><i>As an avid twitter poster,
    I want to be able to shorten links
    so that I can fit more non-link text in my tweets.
    
    <br><br>As a twitter reader,
    I want to be able to visit sites via shortened links,
    so that I can read interesting content.
    
    <br><br>(Stretch) As an avid twitter poster,
    I want to be able to see how many times my subscribers visit my links
    so that I can learn what content they like.</i></p>

    Display Requirements


  <!-- Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</body>
</html>




  

    <!-- https://web.compass.lighthouselabs.ca/projects/w2-url-shortener
    
      Site Header:
          if a user is logged in, the header shows:
              the user's email
              a logout button which makes a POST request to /logout
          if a user is not logged in, the header shows:
              a link to the login page (/login)
              a link to the registration page (/register)
  
  Behaviour Requirements
  
      GET /
          if user is logged in:
              (Minor) redirect to /urls
          if user is not logged in:
              (Minor) redirect to /login
  
      GET /urls
          if user is logged in:
              returns HTML with:
              the site header (see Display Requirements above)
              a list (or table) of URLs the user has created, each list item containing:
                  a short URL
                  the short URL's matching long URL
                  an edit button which makes a GET request to /urls/:id
                  a delete button which makes a POST request to /urls/:id/delete
                  (Stretch) the date the short URL was created
                  (Stretch) the number of times the short URL was visited
                  (Stretch) the number number of unique visits for the short URL
              (Minor) a link to "Create a New Short Link" which makes a GET request to /urls/new
          if user is not logged in:
              returns HTML with a relevant error message
  
      GET /urls/new
          if user is logged in:
              returns HTML with:
              the site header (see Display Requirements above)
              a form which contains:
                  a text input field for the original (long) URL
                  a submit button which makes a POST request to /urls
          if user is not logged in:
              redirects to the /login page
  
      GET /urls/:id
          if user is logged in and owns the URL for the given ID:
              returns HTML with:
              the site header (see Display Requirements above)
              the short URL (for the given ID)
              a form which contains:
                  the corresponding long URL
                  an update button which makes a POST request to /urls/:id
              (Stretch) the date the short URL was created
              (Stretch) the number of times the short URL was visited
              (Stretch) the number of unique visits for the short URL
          if a URL for the given ID does not exist:
              (Minor) returns HTML with a relevant error message
          if user is not logged in:
              returns HTML with a relevant error message
          if user is logged it but does not own the URL with the given ID:
              returns HTML with a relevant error message
  
      GET /u/:id
          if URL for the given ID exists:
              redirects to the corresponding long URL
          if URL for the given ID does not exist:
              (Minor) returns HTML with a relevant error message
  
      POST /urls
          if user is logged in:
              generates a short URL, saves it, and associates it with the user
              redirects to /urls/:id, where :id matches the ID of the newly saved URL
          if user is not logged in:
              (Minor) returns HTML with a relevant error message
  
      POST /urls/:id
          if user is logged in and owns the URL for the given ID:
              updates the URL
              redirects to /urls
          if user is not logged in:
              (Minor) returns HTML with a relevant error message
          if user is logged it but does not own the URL for the given ID:
              (Minor) returns HTML with a relevant error message
          POST /urls/:id/delete
          if user is logged in and owns the URL for the given ID:
              deletes the URL
              redirects to /urls
          if user is not logged in:
              (Minor) returns HTML with a relevant error message
          if user is logged it but does not own the URL for the given ID:
              (Minor) returns HTML with a relevant error message
  
      GET /login
          if user is logged in:
              (Minor) redirects to /urls
          if user is not logged in:
              returns HTML with:
              a form which contains:
                  input fields for email and password
                  submit button that makes a POST request to /login
  
      GET /register
          if user is logged in:
              (Minor) redirects to /urls
          if user is not logged in:
              returns HTML with:
              a form which contains:
                  input fields for email and password
                  a register button that makes a POST request to /register
  
      POST /login
          if email and password params match an existing user:
              sets a cookie
              redirects to /urls
          if email and password params don't match an existing user:
              returns HTML with a relevant error message
  
      POST /register
          if email or password are empty:
              returns HTML with a relevant error message
          if email already exists:
              returns HTML with a relevant error message
          otherwise:
              creates a new user
              encrypts the new user's password with bcrypt
              sets a cookie
              redirects to /urls
  
      POST /logout
          deletes cookie
          redirects to /urls
    -->